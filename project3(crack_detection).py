# -*- coding: utf-8 -*-
"""Project3(crack detection).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ZYh-Vph_TGBtHPT-rwS9PHej8XCaweN
"""

from google.colab import drive
drive.mount('/content/drive')
!ls /content/drive/MyDrive/Concrete_Crack_Images_for_Classification

import os
import numpy as np
import tensorflow as tf
import pathlib
import matplotlib.pyplot as plt

PATH = "/content/drive/MyDrive/Concrete_Crack_Images_for_Classification"

BATCH_SIZE = 40
IMAGE_SIZE = (224,224)
SEED = 123

train_dataset = tf.keras.utils.image_dataset_from_directory(PATH,validation_split=0.3,subset='training',shuffle=True,batch_size=BATCH_SIZE,image_size=IMAGE_SIZE,seed=SEED)
val_dataset = tf.keras.utils.image_dataset_from_directory(PATH,validation_split=0.3,subset='training',shuffle=True,batch_size=BATCH_SIZE,image_size=IMAGE_SIZE,seed=SEED)

#test set
val_batches = tf.data.experimental.cardinality(val_dataset)
test_dataset = val_dataset.take(val_batches//5)
validation_dataset = val_dataset.skip(val_batches//5)

#To create prefetch dataset for better performance
AUTOTUNE = tf.data.AUTOTUNE

train_dataset_pf = train_dataset.prefetch(buffer_size=AUTOTUNE)
validation_dataset_pf = validation_dataset.prefetch(buffer_size=AUTOTUNE)
test_dataset_pf = test_dataset.prefetch(buffer_size=AUTOTUNE)

#We will make use of the method provided in the pretrained model object to rescale input
preprocess_input = tf.keras.applications.mobilenet.preprocess_input

#Create the base model by calling out vgg19
IMG_SHAPE = IMAGE_SIZE + (3,)

#Base model
base_model = tf.keras.applications.VGG19(input_shape=[224,224,3], include_top=False)

#3.3. Freeze the base model and view the model structure
base_model.trainable = False
base_model.summary()

#Add classification layer using global average pooling
class_names = train_dataset.class_names
global_average_layer = tf.keras.layers.GlobalAveragePooling2D()

#Add output layer
prediction_layer = tf.keras.layers.Dense(len(class_names))

#Use functional API to create the entire model (input pipeline + NN)
inputs = tf.keras.Input(shape=IMG_SHAPE)
x = preprocess_input(inputs)
x = base_model(x, training=False)
x = global_average_layer(x)
outputs = prediction_layer(x)

model = tf.keras.Model(inputs,outputs)

model.summary()
tf.keras.utils.plot_model(model, show_shapes=True, show_layer_names=True, show_layer_activations=True)

#Compile model

adam = tf.keras.optimizers.Adam(learning_rate=0.001)
loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)

model.compile(optimizer=adam, loss=loss, metrics=['accuracy'])

#Model performance before training
loss0,accuracy0 = model.evaluate(validation_dataset_pf)
print("---------------------Before Training----------------------")
print(f"Loss = {loss0}")
print(f"Accuracy = {accuracy0}")

#Model training 
EPOCHS = 100

log_dir="logs/fit/"
tb_callback=tf.keras.callbacks.TensorBoard(log_dir=log_dir)
es_callback = tf.keras.callbacks.EarlyStopping(monitor='loss',patience=3)

history = model.fit(train_dataset_pf,validation_data=validation_dataset_pf, batch_size=BATCH_SIZE, epochs=EPOCHS,callbacks=[tb_callback,es_callback])

#Evaluate with test dataset
test_loss,test_accuracy = model.evaluate(test_dataset_pf)

print('------------------------Test Result----------------------------')
print(f'Loss = {test_loss}')
print(f'Accuracy = {test_accuracy}')

#Deploy model to make prediction
image_batch, label_batch = test_dataset_pf.as_numpy_iterator().next()
predictions = model.predict_on_batch(image_batch)
class_predictions = np.argmax(predictions,axis=1)

#Show some prediction results

plt.figure(figsize=(10,10))

for i in range(8):
    axs = plt.subplot(2,2,i+1)
    plt.imshow(image_batch[i].astype('uint8'))
    current_prediction = class_names[class_predictions[i]]
    current_label = class_names[label_batch[i]]
    plt.title(f"Prediction: {current_prediction}, Actual: {current_label}")
    plt.axis('off')